package ru.davidzh.coder.backend.model

import io.swagger.v3.oas.annotations.media.ArraySchema
import io.swagger.v3.oas.annotations.media.Schema
import java.time.LocalDateTime
import java.util.*

@Schema(description = "Represents a job entity within the system, detailing its configuration, status, execution history, and ownership.")
data class Job(

    @field:Schema(
        description = "The unique internal identifier of the job. Generated by the system upon creation.",
        example = "101"
    )
    val id: Long? = null,

    @field:Schema(
        description = "The unique identifier (UUID) of the user who owns or created this job.",
        requiredMode = Schema.RequiredMode.REQUIRED,
        example = "123e4567-e89b-12d3-a456-426614174000"
    )
    val userId: UUID,

    @field:Schema(
        description = "Optional unique identifier (UUID) of the group this job is associated with.",
        requiredMode = Schema.RequiredMode.NOT_REQUIRED,
        example = "a1b2c3d4-e5f6-7890-1234-567890abcdef"
    )
    val groupId: UUID? = null,

    @field:Schema(
        description = "A user-defined name for the job, used for identification.",
        requiredMode = Schema.RequiredMode.REQUIRED,
        example = "Daily Data Processing Task"
    )
    val name: String,

    @field:Schema(
        description = "The timestamp indicating when the job entity was created in the system.",
        example = "2023-10-27T10:15:30",
        format = "date-time"
    )
    val createdAt: LocalDateTime?,

    @field:Schema(
        description = "The reference to the Docker image used for executing the job (e.g., 'ubuntu:latest', 'myregistry.com/myimage:v1.2').",
        requiredMode = Schema.RequiredMode.REQUIRED,
        example = "postgres:15-alpine"
    )
    val dockerImage: String,

    @field:ArraySchema(
        schema = Schema(description = "Command or argument string.", example = "--process-all")
    )
    @field:Schema(
        description = "The command and its arguments to be executed within the Docker container. Corresponds to Docker's CMD or ENTRYPOINT.",
        requiredMode = Schema.RequiredMode.REQUIRED
    )
    val command: List<String>,

    @field:Schema(
        description = "A map of environment variables (key-value pairs) to be set within the container during job execution.",

        requiredMode = Schema.RequiredMode.NOT_REQUIRED,
        example = """{"DATABASE_URL": "prod-db-url", "LOG_LEVEL": "INFO"}"""
    )
    val environmentVariables: Map<String, String>,

    @field:Schema(
        description = "Specifies how the job is triggered (e.g., IMMEDIATE, SCHEDULED, WEBHOOK).",
        requiredMode = Schema.RequiredMode.REQUIRED,
        implementation = ExecutionType::class

    )
    val executionType: ExecutionType,

    @field:Schema(
        description = "A cron-formatted schedule string defining when the job runs. Applicable only if `executionType` is 'SCHEDULED'.",
        requiredMode = Schema.RequiredMode.NOT_REQUIRED,
        example = "0 2 * * MON-FRI"
    )
    val schedule: String? = null,

    @field:Schema(
        description = "The current execution status of the job.",
        implementation = JobStatus::class

    )
    val status: JobStatus? = null,

    @field:Schema(
        description = "An optional ordinal number, potentially indicating execution order or sequence if part of a larger workflow.",
        requiredMode = Schema.RequiredMode.NOT_REQUIRED,
        example = "1"
    )
    val ordinal: Int? = null,

    @field:Schema(
        description = "Flag indicating whether the job has been marked for deletion (soft delete). Defaults to false.",
        example = "false"
    )
    val deleted: Boolean? = false,

    @field:ArraySchema(
        schema = Schema(implementation = ExecutionResult::class)
    )
    @field:Schema(
        description = "A list containing the results or history of past executions for this job.",
    )
    val executionResults: List<ExecutionResult>? = null
) {}